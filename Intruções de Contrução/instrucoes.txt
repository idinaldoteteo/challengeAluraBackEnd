Instruction about how create the Spring with Mysql
	https://spring.io/guides/gs/accessing-data-mysql/

1) Create the project with Spring Tool 
2) Create the database	
3) Create the application.properties	
4) Create the Entity class (Example: Video)
5) Create the Repository (Example: VideoRepository)
6) Create a Controller
	
1) Instruções:
	Spring Web, 
	Spring Data JPA, 
	and MySQL Driver
	
	https://mvnrepository.com/
	
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>
	
2) Instruções:
	mysql> create database db_example; -- Creates the new database
	mysql> create user 'springuser'@'%' identified by 'ThePassword'; -- Creates the user
	mysql> grant all on db_example.* to 'springuser'@'%'; -- Gives all privileges to the new user on the newly created database
	
3) Instruções:
	spring.jpa.hibernate.ddl-auto=update
	spring.datasource.url=jdbc:mysql://${MYSQL_HOST:localhost}:3306/db_example
	spring.datasource.username=springuser
	spring.datasource.password=ThePassword
	spring.datasource.driver-class-name =com.mysql.jdbc.Driver
	#spring.jpa.show-sql: true
	Here, spring.jpa.hibernate.ddl-auto can be none, update, create, or create-drop. See the Hibernate documentation for details.
	none: The default for MySQL. No change is made to the database structure.
	update: Hibernate changes the database according to the given entity structures.
	create: Creates the database every time but does not drop it on close.
	create-drop: Creates the database and drops it when SessionFactory closes.
	
5) Instruções:
	// This will be AUTO IMPLEMENTED by Spring into a Bean called userRepository
	// CRUD refers Create, Read, Update, Delete
	Spring automatically implements this repository interface in a bean that has the same name (with a change in the case — it is called userRepository).

6) Instruções:
	nomeDTO -> tudo que sai da API
	nomeForm -> tudo que entra na API
	import org.springframework.beans.factory.annotation.Autowired;
	import org.springframework.stereotype.Controller;
	import org.springframework.web.bind.annotation.GetMapping;
	import org.springframework.web.bind.annotation.PostMapping;
	import org.springframework.web.bind.annotation.RequestMapping;
	import org.springframework.web.bind.annotation.RequestParam;
	import org.springframework.web.bind.annotation.ResponseBody;
	
	@Controller // This means that this class is a Controller
	@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
	public class MainController {
	  @Autowired // This means to get the bean called userRepository
	         // Which is auto-generated by Spring, we will use it to handle the data
	  private UserRepository userRepository;
	
	  @PostMapping(path="/add") // Map ONLY POST Requests
	  public @ResponseBody String addNewUser (@RequestParam String name
	      , @RequestParam String email) {
	    // @ResponseBody means the returned String is the response, not a view name
	    // @RequestParam means it is a parameter from the GET or POST request
	
	    User n = new User();
	    n.setName(name);
	    n.setEmail(email);
	    userRepository.save(n);
	    return "Saved";
	  }
	
	  @GetMapping(path="/all")
	  public @ResponseBody Iterable<User> getAllUsers() {
	    // This returns a JSON or XML with the users
	    return userRepository.findAll();
	  }
	}


		